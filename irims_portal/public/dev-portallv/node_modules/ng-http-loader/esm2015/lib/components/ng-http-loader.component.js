/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Component, Input } from '@angular/core';
import { merge, timer } from 'rxjs';
import { debounce, distinctUntilChanged, partition, switchMap } from 'rxjs/operators';
import { PendingInterceptorService } from '../services/pending-interceptor.service';
import { SpinnerVisibilityService } from '../services/spinner-visibility.service';
import { Spinkit } from '../spinkits';
export class NgHttpLoaderComponent {
    /**
     * @param {?} pendingInterceptorService
     * @param {?} spinnerVisibilityService
     */
    constructor(pendingInterceptorService, spinnerVisibilityService) {
        this.pendingInterceptorService = pendingInterceptorService;
        this.spinnerVisibilityService = spinnerVisibilityService;
        this.spinkit = Spinkit;
        this.visibleUntil = Date.now();
        this.spinner = Spinkit.skCubeGrid;
        this.filteredUrlPatterns = [];
        this.filteredMethods = [];
        this.filteredHeaders = [];
        this.debounceDelay = 0;
        this.minDuration = 0;
        this.extraDuration = 0;
        this.entryComponent = null;
        const [showSpinner$, hideSpinner$] = partition((h) => h)(this.pendingInterceptorService.pendingRequestsStatus$);
        this.subscriptions = merge(this.pendingInterceptorService.pendingRequestsStatus$.pipe(switchMap(() => showSpinner$.pipe(debounce(() => timer(this.debounceDelay))))), showSpinner$.pipe(switchMap(() => hideSpinner$.pipe(debounce(() => this.getVisibilityTimer())))), this.spinnerVisibilityService.visibilityObservable$)
            .pipe(distinctUntilChanged())
            .subscribe(h => this.handleSpinnerVisibility(h));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nullifySpinnerIfEntryComponentIsDefined();
        this.initFilters();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     * @return {?}
     */
    nullifySpinnerIfEntryComponentIsDefined() {
        if (null != this.entryComponent) {
            this.spinner = null;
        }
    }
    /**
     * @return {?}
     */
    initFilters() {
        this.initFilteredUrlPatterns();
        this.initFilteredMethods();
        this.initFilteredHeaders();
    }
    /**
     * @return {?}
     */
    initFilteredUrlPatterns() {
        if (!(this.filteredUrlPatterns instanceof Array)) {
            throw new TypeError('`filteredUrlPatterns` must be an array.');
        }
        if (!!this.filteredUrlPatterns.length) {
            this.filteredUrlPatterns.forEach(e => this.pendingInterceptorService.filteredUrlPatterns.push(new RegExp(e)));
        }
    }
    /**
     * @return {?}
     */
    initFilteredMethods() {
        if (!(this.filteredMethods instanceof Array)) {
            throw new TypeError('`filteredMethods` must be an array.');
        }
        this.pendingInterceptorService.filteredMethods = this.filteredMethods;
    }
    /**
     * @return {?}
     */
    initFilteredHeaders() {
        if (!(this.filteredHeaders instanceof Array)) {
            throw new TypeError('`filteredHeaders` must be an array.');
        }
        this.pendingInterceptorService.filteredHeaders = this.filteredHeaders;
    }
    /**
     * @param {?} showSpinner
     * @return {?}
     */
    handleSpinnerVisibility(showSpinner) {
        if (showSpinner) {
            this.visibleUntil = Date.now() + this.minDuration;
        }
        this.isSpinnerVisible = showSpinner;
    }
    /**
     * @return {?}
     */
    getVisibilityTimer() {
        return timer(Math.max(this.extraDuration, this.visibleUntil - Date.now()));
    }
}
NgHttpLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-http-loader',
                template: "<div id=\"spinner\" *ngIf=\"isSpinnerVisible\">\n\n    <ng-container *ngComponentOutlet=\"entryComponent\"></ng-container>\n\n    <sk-cube-grid\n        *ngIf=\"spinner === spinkit.skCubeGrid\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-cube-grid>\n\n    <sk-chasing-dots\n        *ngIf=\"spinner === spinkit.skChasingDots\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-chasing-dots>\n\n    <sk-double-bounce\n        *ngIf=\"spinner === spinkit.skDoubleBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-double-bounce>\n\n    <sk-rotating-plane\n        *ngIf=\"spinner === spinkit.skRotatingPlane\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-rotating-plane>\n\n    <sk-spinner-pulse\n        *ngIf=\"spinner === spinkit.skSpinnerPulse\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-spinner-pulse>\n\n    <sk-three-bounce\n        *ngIf=\"spinner === spinkit.skThreeBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-three-bounce>\n\n    <sk-wandering-cubes\n        *ngIf=\"spinner === spinkit.skWanderingCubes\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wandering-cubes>\n\n    <sk-wave\n        *ngIf=\"spinner === spinkit.skWave\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wave>\n\n</div>\n\n",
                styles: ["#spinner{top:0;left:0;height:100%;width:100%;position:fixed;z-index:9999;display:flex;align-items:center;justify-content:center;opacity:.7;background-color:#f1f1f1}::ng-deep .colored-parent,::ng-deep .colored>div{background-color:#333}"]
            }] }
];
/** @nocollapse */
NgHttpLoaderComponent.ctorParameters = () => [
    { type: PendingInterceptorService },
    { type: SpinnerVisibilityService }
];
NgHttpLoaderComponent.propDecorators = {
    backgroundColor: [{ type: Input }],
    spinner: [{ type: Input }],
    filteredUrlPatterns: [{ type: Input }],
    filteredMethods: [{ type: Input }],
    filteredHeaders: [{ type: Input }],
    debounceDelay: [{ type: Input }],
    minDuration: [{ type: Input }],
    extraDuration: [{ type: Input }],
    entryComponent: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgHttpLoaderComponent.prototype.isSpinnerVisible;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.spinkit;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.subscriptions;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.visibleUntil;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.backgroundColor;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.spinner;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredUrlPatterns;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredMethods;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.filteredHeaders;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.debounceDelay;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.minDuration;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.extraDuration;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.entryComponent;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.pendingInterceptorService;
    /** @type {?} */
    NgHttpLoaderComponent.prototype.spinnerVisibilityService;
}

//# sourceMappingURL=data:application/json;base64,