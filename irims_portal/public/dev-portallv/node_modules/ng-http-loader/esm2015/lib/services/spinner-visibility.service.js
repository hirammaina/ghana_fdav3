/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { PendingInterceptorService } from './pending-interceptor.service';
import * as i0 from "@angular/core";
import * as i1 from "./pending-interceptor.service";
export class SpinnerVisibilityService {
    /**
     * @param {?} pendingInterceptorService
     */
    constructor(pendingInterceptorService) {
        this.pendingInterceptorService = pendingInterceptorService;
        this._visibilitySubject = new ReplaySubject(1);
    }
    /**
     * @return {?}
     */
    get visibilityObservable$() {
        return this._visibilitySubject.asObservable();
    }
    /**
     * @return {?}
     */
    show() {
        this.pendingInterceptorService.forceByPass = true;
        this._visibilitySubject.next(true);
    }
    /**
     * @return {?}
     */
    hide() {
        this._visibilitySubject.next(false);
        this.pendingInterceptorService.forceByPass = false;
    }
}
SpinnerVisibilityService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SpinnerVisibilityService.ctorParameters = () => [
    { type: PendingInterceptorService }
];
/** @nocollapse */ SpinnerVisibilityService.ngInjectableDef = i0.defineInjectable({ factory: function SpinnerVisibilityService_Factory() { return new SpinnerVisibilityService(i0.inject(i1.PendingInterceptorService)); }, token: SpinnerVisibilityService, providedIn: "root" });
if (false) {
    /** @type {?} */
    SpinnerVisibilityService.prototype._visibilitySubject;
    /** @type {?} */
    SpinnerVisibilityService.prototype.pendingInterceptorService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci12aXNpYmlsaXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1odHRwLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zcGlubmVyLXZpc2liaWxpdHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFTQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7OztBQUsxRSxNQUFNOzs7O0lBR0YsWUFBb0IseUJBQW9EO1FBQXBELDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBMkI7a0NBRm5CLElBQUksYUFBYSxDQUFVLENBQUMsQ0FBQztLQUdqRjs7OztJQUVELElBQUkscUJBQXFCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO0tBQ2pEOzs7O0lBRU0sSUFBSTtRQUNQLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ2xELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Ozs7O0lBR2hDLElBQUk7UUFDUCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDOzs7O1lBcEIxRCxVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFKUSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQZW5kaW5nSW50ZXJjZXB0b3JTZXJ2aWNlIH0gZnJvbSAnLi9wZW5kaW5nLWludGVyY2VwdG9yLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNwaW5uZXJWaXNpYmlsaXR5U2VydmljZSB7XG4gICAgcHJpdmF0ZSBfdmlzaWJpbGl0eVN1YmplY3Q6IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigxKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGVuZGluZ0ludGVyY2VwdG9yU2VydmljZTogUGVuZGluZ0ludGVyY2VwdG9yU2VydmljZSkge1xuICAgIH1cblxuICAgIGdldCB2aXNpYmlsaXR5T2JzZXJ2YWJsZSQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aXNpYmlsaXR5U3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvdygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wZW5kaW5nSW50ZXJjZXB0b3JTZXJ2aWNlLmZvcmNlQnlQYXNzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fdmlzaWJpbGl0eVN1YmplY3QubmV4dCh0cnVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGlkZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fdmlzaWJpbGl0eVN1YmplY3QubmV4dChmYWxzZSk7XG4gICAgICAgIHRoaXMucGVuZGluZ0ludGVyY2VwdG9yU2VydmljZS5mb3JjZUJ5UGFzcyA9IGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==