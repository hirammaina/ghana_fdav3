/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { PendingInterceptorService } from './pending-interceptor.service';
import * as i0 from "@angular/core";
import * as i1 from "./pending-interceptor.service";
var SpinnerVisibilityService = /** @class */ (function () {
    function SpinnerVisibilityService(pendingInterceptorService) {
        this.pendingInterceptorService = pendingInterceptorService;
        this._visibilitySubject = new ReplaySubject(1);
    }
    Object.defineProperty(SpinnerVisibilityService.prototype, "visibilityObservable$", {
        get: /**
         * @return {?}
         */
        function () {
            return this._visibilitySubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SpinnerVisibilityService.prototype.show = /**
     * @return {?}
     */
    function () {
        this.pendingInterceptorService.forceByPass = true;
        this._visibilitySubject.next(true);
    };
    /**
     * @return {?}
     */
    SpinnerVisibilityService.prototype.hide = /**
     * @return {?}
     */
    function () {
        this._visibilitySubject.next(false);
        this.pendingInterceptorService.forceByPass = false;
    };
    SpinnerVisibilityService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SpinnerVisibilityService.ctorParameters = function () { return [
        { type: PendingInterceptorService }
    ]; };
    /** @nocollapse */ SpinnerVisibilityService.ngInjectableDef = i0.defineInjectable({ factory: function SpinnerVisibilityService_Factory() { return new SpinnerVisibilityService(i0.inject(i1.PendingInterceptorService)); }, token: SpinnerVisibilityService, providedIn: "root" });
    return SpinnerVisibilityService;
}());
export { SpinnerVisibilityService };
if (false) {
    /** @type {?} */
    SpinnerVisibilityService.prototype._visibilitySubject;
    /** @type {?} */
    SpinnerVisibilityService.prototype.pendingInterceptorService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci12aXNpYmlsaXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1odHRwLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zcGlubmVyLXZpc2liaWxpdHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFTQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7SUFRdEUsa0NBQW9CLHlCQUFvRDtRQUFwRCw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO2tDQUZuQixJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUM7S0FHakY7SUFFRCxzQkFBSSwyREFBcUI7Ozs7UUFBekI7WUFDSSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNqRDs7O09BQUE7Ozs7SUFFTSx1Q0FBSTs7OztRQUNQLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ2xELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Ozs7O0lBR2hDLHVDQUFJOzs7O1FBQ1AsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMseUJBQXlCLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQzs7O2dCQXBCMUQsVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFKUSx5QkFBeUI7OzttQ0FYbEM7O1NBZ0JhLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBlbmRpbmdJbnRlcmNlcHRvclNlcnZpY2UgfSBmcm9tICcuL3BlbmRpbmctaW50ZXJjZXB0b3Iuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgU3Bpbm5lclZpc2liaWxpdHlTZXJ2aWNlIHtcbiAgICBwcml2YXRlIF92aXNpYmlsaXR5U3ViamVjdDogUmVwbGF5U3ViamVjdDxib29sZWFuPiA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KDEpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwZW5kaW5nSW50ZXJjZXB0b3JTZXJ2aWNlOiBQZW5kaW5nSW50ZXJjZXB0b3JTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgZ2V0IHZpc2liaWxpdHlPYnNlcnZhYmxlJCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2liaWxpdHlTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnBlbmRpbmdJbnRlcmNlcHRvclNlcnZpY2UuZm9yY2VCeVBhc3MgPSB0cnVlO1xuICAgICAgICB0aGlzLl92aXNpYmlsaXR5U3ViamVjdC5uZXh0KHRydWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLl92aXNpYmlsaXR5U3ViamVjdC5uZXh0KGZhbHNlKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nSW50ZXJjZXB0b3JTZXJ2aWNlLmZvcmNlQnlQYXNzID0gZmFsc2U7XG4gICAgfVxufVxuIl19