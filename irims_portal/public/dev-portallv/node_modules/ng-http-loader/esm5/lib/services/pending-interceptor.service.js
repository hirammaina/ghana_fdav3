/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ReplaySubject, throwError } from 'rxjs';
import { catchError, finalize, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
var PendingInterceptorService = /** @class */ (function () {
    function PendingInterceptorService() {
        this._pendingRequests = 0;
        this._pendingRequestsStatus = new ReplaySubject(1);
        this._filteredUrlPatterns = [];
        this._filteredMethods = [];
        this._filteredHeaders = [];
    }
    Object.defineProperty(PendingInterceptorService.prototype, "pendingRequestsStatus$", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pendingRequestsStatus.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "pendingRequests", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pendingRequests;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "filteredUrlPatterns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filteredUrlPatterns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "filteredMethods", {
        set: /**
         * @param {?} httpMethods
         * @return {?}
         */
        function (httpMethods) {
            this._filteredMethods = httpMethods;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "filteredHeaders", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filteredHeaders = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "forceByPass", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._forceByPass = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @return {?}
     */
    PendingInterceptorService.prototype.shouldBypassUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this._filteredUrlPatterns.some(function (e) {
            return e.test(url);
        });
    };
    /**
     * @param {?} req
     * @return {?}
     */
    PendingInterceptorService.prototype.shouldBypassMethod = /**
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this._filteredMethods.some(function (e) {
            return e.toUpperCase() === req.method.toUpperCase();
        });
    };
    /**
     * @param {?} req
     * @return {?}
     */
    PendingInterceptorService.prototype.shouldBypassHeader = /**
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this._filteredHeaders.some(function (e) {
            return req.headers.has(e);
        });
    };
    /**
     * @param {?} req
     * @return {?}
     */
    PendingInterceptorService.prototype.shouldBypass = /**
     * @param {?} req
     * @return {?}
     */
    function (req) {
        return this.shouldBypassUrl(req.urlWithParams)
            || this.shouldBypassMethod(req)
            || this.shouldBypassHeader(req)
            || this._forceByPass;
    };
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    PendingInterceptorService.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        /** @type {?} */
        var shouldBypass = this.shouldBypass(req);
        if (!shouldBypass) {
            this._pendingRequests++;
            if (1 === this._pendingRequests) {
                this._pendingRequestsStatus.next(true);
            }
        }
        return next.handle(req).pipe(map(function (event) {
            return event;
        }), catchError(function (error) {
            return throwError(error);
        }), finalize(function () {
            if (!shouldBypass) {
                _this._pendingRequests--;
                if (0 === _this._pendingRequests) {
                    _this._pendingRequestsStatus.next(false);
                }
            }
        }));
    };
    PendingInterceptorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ PendingInterceptorService.ngInjectableDef = i0.defineInjectable({ factory: function PendingInterceptorService_Factory() { return new PendingInterceptorService(); }, token: PendingInterceptorService, providedIn: "root" });
    return PendingInterceptorService;
}());
export { PendingInterceptorService };
if (false) {
    /** @type {?} */
    PendingInterceptorService.prototype._pendingRequests;
    /** @type {?} */
    PendingInterceptorService.prototype._pendingRequestsStatus;
    /** @type {?} */
    PendingInterceptorService.prototype._filteredUrlPatterns;
    /** @type {?} */
    PendingInterceptorService.prototype._filteredMethods;
    /** @type {?} */
    PendingInterceptorService.prototype._filteredHeaders;
    /** @type {?} */
    PendingInterceptorService.prototype._forceByPass;
}
/** @type {?} */
export var PendingInterceptorServiceInterceptor = [{
        provide: HTTP_INTERCEPTORS,
        useExisting: PendingInterceptorService,
        multi: true
    }];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVuZGluZy1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctaHR0cC1sb2FkZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvcGVuZGluZy1pbnRlcmNlcHRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQVNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0QsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRyxPQUFPLEVBQW9CLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQWMsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztnQ0FNNUIsQ0FBQztzQ0FDNkIsSUFBSSxhQUFhLENBQVUsQ0FBQyxDQUFDO29DQUM3QyxFQUFFO2dDQUNOLEVBQUU7Z0NBQ0YsRUFBRTs7SUFHdkMsc0JBQUksNkRBQXNCOzs7O1FBQTFCO1lBQ0ksT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckQ7OztPQUFBO0lBRUQsc0JBQUksc0RBQWU7Ozs7UUFBbkI7WUFDSSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztTQUNoQzs7O09BQUE7SUFFRCxzQkFBSSwwREFBbUI7Ozs7UUFBdkI7WUFDSSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztTQUNwQzs7O09BQUE7SUFFRCxzQkFBSSxzREFBZTs7Ozs7UUFBbkIsVUFBb0IsV0FBcUI7WUFDckMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFdBQVcsQ0FBQztTQUN2Qzs7O09BQUE7SUFFRCxzQkFBSSxzREFBZTs7Ozs7UUFBbkIsVUFBb0IsS0FBZTtZQUMvQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1NBQ2pDOzs7T0FBQTtJQUVELHNCQUFJLGtEQUFXOzs7OztRQUFmLFVBQWdCLEtBQWM7WUFDMUIsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7U0FDN0I7OztPQUFBOzs7OztJQUVPLG1EQUFlOzs7O2NBQUMsR0FBVztRQUMvQixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDO1lBQ25DLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN0QixDQUFDLENBQUM7Ozs7OztJQUdDLHNEQUFrQjs7OztjQUFDLEdBQXFCO1FBQzVDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFBLENBQUM7WUFDL0IsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN2RCxDQUFDLENBQUM7Ozs7OztJQUdDLHNEQUFrQjs7OztjQUFDLEdBQXFCO1FBQzVDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFBLENBQUM7WUFDL0IsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QixDQUFDLENBQUM7Ozs7OztJQUdDLGdEQUFZOzs7O2NBQUMsR0FBcUI7UUFDdEMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUM7ZUFDdkMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQztlQUM1QixJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDO2VBQzVCLElBQUksQ0FBQyxZQUFZLENBQUM7Ozs7Ozs7SUFHN0IsNkNBQVM7Ozs7O0lBQVQsVUFBVSxHQUFxQixFQUFFLElBQWlCO1FBQWxELGlCQTRCQzs7UUEzQkcsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU1QyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2YsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFFeEIsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLGdCQUFnQixFQUFFO2dCQUM3QixJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzFDO1NBQ0o7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUN4QixHQUFHLENBQUMsVUFBQSxLQUFLO1lBQ0wsT0FBTyxLQUFLLENBQUM7U0FDaEIsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxVQUFBLEtBQUs7WUFDWixPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1QixDQUFDLEVBQ0YsUUFBUSxDQUFDO1lBQ0wsSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDZixLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFFeEIsSUFBSSxDQUFDLEtBQUssS0FBSSxDQUFDLGdCQUFnQixFQUFFO29CQUM3QixLQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUMzQzthQUNKO1NBQ0osQ0FBQyxDQUNMLENBQUM7S0FDTDs7Z0JBeEZKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7OztvQ0FoQkQ7O1NBaUJhLHlCQUF5Qjs7Ozs7Ozs7Ozs7Ozs7OztBQXdGdEMsV0FBYSxvQ0FBb0MsR0FBdUIsQ0FBQztRQUNyRSxPQUFPLEVBQUUsaUJBQWlCO1FBQzFCLFdBQVcsRUFBRSx5QkFBeUI7UUFDdEMsS0FBSyxFQUFFLElBQUk7S0FDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5pbXBvcnQgeyBIVFRQX0lOVEVSQ0VQVE9SUywgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEV4aXN0aW5nUHJvdmlkZXIsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIGZpbmFsaXplLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUGVuZGluZ0ludGVyY2VwdG9yU2VydmljZSBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gICAgcHJpdmF0ZSBfcGVuZGluZ1JlcXVlc3RzID0gMDtcbiAgICBwcml2YXRlIF9wZW5kaW5nUmVxdWVzdHNTdGF0dXM6IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigxKTtcbiAgICBwcml2YXRlIF9maWx0ZXJlZFVybFBhdHRlcm5zOiBSZWdFeHBbXSA9IFtdO1xuICAgIHByaXZhdGUgX2ZpbHRlcmVkTWV0aG9kczogc3RyaW5nW10gPSBbXTtcbiAgICBwcml2YXRlIF9maWx0ZXJlZEhlYWRlcnM6IHN0cmluZ1tdID0gW107XG4gICAgcHJpdmF0ZSBfZm9yY2VCeVBhc3M6IGJvb2xlYW47XG5cbiAgICBnZXQgcGVuZGluZ1JlcXVlc3RzU3RhdHVzJCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlbmRpbmdSZXF1ZXN0c1N0YXR1cy5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBnZXQgcGVuZGluZ1JlcXVlc3RzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wZW5kaW5nUmVxdWVzdHM7XG4gICAgfVxuXG4gICAgZ2V0IGZpbHRlcmVkVXJsUGF0dGVybnMoKTogUmVnRXhwW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVyZWRVcmxQYXR0ZXJucztcbiAgICB9XG5cbiAgICBzZXQgZmlsdGVyZWRNZXRob2RzKGh0dHBNZXRob2RzOiBzdHJpbmdbXSkge1xuICAgICAgICB0aGlzLl9maWx0ZXJlZE1ldGhvZHMgPSBodHRwTWV0aG9kcztcbiAgICB9XG5cbiAgICBzZXQgZmlsdGVyZWRIZWFkZXJzKHZhbHVlOiBzdHJpbmdbXSkge1xuICAgICAgICB0aGlzLl9maWx0ZXJlZEhlYWRlcnMgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBzZXQgZm9yY2VCeVBhc3ModmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fZm9yY2VCeVBhc3MgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3VsZEJ5cGFzc1VybCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVyZWRVcmxQYXR0ZXJucy5zb21lKGUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGUudGVzdCh1cmwpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3VsZEJ5cGFzc01ldGhvZChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlcmVkTWV0aG9kcy5zb21lKGUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGUudG9VcHBlckNhc2UoKSA9PT0gcmVxLm1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3VsZEJ5cGFzc0hlYWRlcihyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlcmVkSGVhZGVycy5zb21lKGUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlcS5oZWFkZXJzLmhhcyhlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG91bGRCeXBhc3MocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNob3VsZEJ5cGFzc1VybChyZXEudXJsV2l0aFBhcmFtcylcbiAgICAgICAgICAgIHx8IHRoaXMuc2hvdWxkQnlwYXNzTWV0aG9kKHJlcSlcbiAgICAgICAgICAgIHx8IHRoaXMuc2hvdWxkQnlwYXNzSGVhZGVyKHJlcSlcbiAgICAgICAgICAgIHx8IHRoaXMuX2ZvcmNlQnlQYXNzO1xuICAgIH1cblxuICAgIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgICAgICBjb25zdCBzaG91bGRCeXBhc3MgPSB0aGlzLnNob3VsZEJ5cGFzcyhyZXEpO1xuXG4gICAgICAgIGlmICghc2hvdWxkQnlwYXNzKSB7XG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdHMrKztcblxuICAgICAgICAgICAgaWYgKDEgPT09IHRoaXMuX3BlbmRpbmdSZXF1ZXN0cykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdSZXF1ZXN0c1N0YXR1cy5uZXh0KHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSkucGlwZShcbiAgICAgICAgICAgIG1hcChldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXNob3VsZEJ5cGFzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdHMtLTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdGhpcy5fcGVuZGluZ1JlcXVlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdHNTdGF0dXMubmV4dChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IFBlbmRpbmdJbnRlcmNlcHRvclNlcnZpY2VJbnRlcmNlcHRvcjogRXhpc3RpbmdQcm92aWRlcltdID0gW3tcbiAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcbiAgICB1c2VFeGlzdGluZzogUGVuZGluZ0ludGVyY2VwdG9yU2VydmljZSxcbiAgICBtdWx0aTogdHJ1ZVxufV07XG4iXX0=